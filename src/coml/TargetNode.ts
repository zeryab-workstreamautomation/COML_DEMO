import { Converter } from "./Converter";
import { CoElement } from "./CoElement";
import { Render } from "./Render";
import { Repaint } from "./Repaint";
import { Patch } from "./Patch";
import { This } from "./This";

export enum TNS {
    MARKED=0,
    REUSED=1,
    ADDED=2
}


/**
 * TargetNode stores the state of the conversion between a Source node (snode) in the COML html file
 * and the rendered final Node (target node or tnode).
 * 
 * 
 */
 export interface TargetNode {
    /**
     * The source node that this target node represents
     */
     snode:Node;
    /**
     * The target node that is generated by the CoElement's onRender()
     */
     tnode:Node;  
     replaced:Node; // only used by WSInsert
     component:CoElement;
     parent?:TargetNode;
     children:TargetNode[/* iteration */][/* index */]; 
     marked:TNS;

    /**
     * Given a child snode (as returned by sourceChildNodes()), create its TargetNode.
     * 
     * The implementation will:
     *      1. use its owning Converter to create the CoElement for the new child.
     *      2. Create a new instance of a TargetNode as the child
     *      3. Add a CoElement the child's 'component'
     * 
     * 
     * @param snode The source node for which to create a TargetNode
     * @param cvt The COnverter to use to create this node's CoELement 
     * @returns The new TargetNode
     */
    makeTargetNode(snode:Node,cvt:Converter<This>): TargetNode;


    /**
     * Return the Converter that 'owns' this TargetNode. This converter will be used
     * to render this TargetNode, and hence its 'This' will be use during rendering of the TargetNode.
     * 
     * @param defaultOwner The default owner.
     * @returns 
     */
    getOwner(defaultOwner:Converter<This>) : Converter<This>


    getId(): any;



    /**
     * Returns the html child Nodes of this TargetNode which should be used for creating 
     * child TargetNodes.
     * 
     * During templating, the actual nodes returned may be different from the true children of this.snode
     * 
     * @returns 
     */
    sourceChildNodes() : NodeListOf<ChildNode> | Node[];


    /**
     * returns all target nodes generated by this source node.
     * 
     * @returns 
     */
    getGeneratedNodes(): Node[];

    /**
     * Adds a  child target node as a child to this target node, for the iteration.
     * 
     * @param tn 
     * @param iteration 
     */
    addChild(tn:TargetNode,iteration:number);

    /**
     * Replace the child 'tn' with the replacement 'rtn'
     * 
     * @param tn 
     * @param rtn 
     */
    replaceChild(tn: TargetNode, rtn: TargetNode);

    /**
     * Remove all children from this target node.
     */
    removeAllChildren();


    
    /**
     * remove any unused children, calling the attached wselement's 'cleanup' if supplied.
     * 
     * @param parenttn 
     */
    retireUnused();

    /**
     * Returns the index in children of the child whose node matches 'cn'
     * and was generated in iteration number 'iteration' previously.
     * 
     * @param cn 
     * @param iteration 
     * @returns the index in children or -1 if not found.
     */
    findChildForNode(cn: Node,iteration:number) : number;

    /**
     * Returns the iteration to which the direct child `child` belongs.
     * 
     * @param child A direct child of this TargetNode
     * @returns The iteration, or -1 if not found.
     */
    getIterationOfChild(child:TargetNode) : number;

    

    initMark();

    

    /**
     * Add an 'attached' control (such as added by this.attach()) to this node.
     * 
     */
    attachControl(control: CoElement);

    removeAttachedControl(control:CoElement);

    removeAllAttachedControls(cb?:(comp:CoElement)=>any);

    isAttached(control: CoElement): boolean;


    renderAttached(rm:Render,cvt:Converter<This>);

    /**
     * Renders this target node.
     * This should only be called by a Converter.
     * 
     * @param rm 
     */
    render(rm:Render);

    /**
     * Returns a Patch object that is used during invalidation to attach
     * the regenerated node back to its parent.
     */
    getPatch() : Patch;
    
    /**
     * Empty this node, as if it had just been added to its parent, prior to a full regeneration
     */
    reset();

    remove();

    /**
     * Adds a style class to the target node.
     * 
     * @param clazz 
     */
    addStyleClass(clazz:string);

    /**
     * Removes a style from the tnode.
     * 
     * @param clazz 
     */
    removeStyleClass(clazz:string);

    /**
	 * Retrieves, modifies or removes custom data attached to a CoElement.
	 *
	 * Usages:
	 * <h4>Setting the value for a single key</h4>
	 * <pre>
	 *    data("myKey", myData)
	 * </pre>
	 * Attaches <code>myData</code> (which can be any JS data type, e.g. a number, a string, an object, or a function)
	 * to this element, under the given key "myKey". If the key already exists,the value will be updated.
	 *
	 *
	 * <h4>Setting a value for a single key (rendered to the DOM)</h4>
	 * <pre>
	 *    data("myKey", myData, writeToDom)
	 * </pre>
	 * Attaches <code>myData</code> to this element, under the given key "myKey" . If the key already exists,the value will be updated.
	 * While <code>oValue</code> can be any JS data type to be attached, it must be a string to be also
	 * written to DOM. The key must also be a valid HTML attribute name (it must conform to <code>sap.ui.core.ID</code>
	 * and may contain no colon) and may not start with "sap-ui". When written to HTML, the key is prefixed with "data-".
	 *
	 *
	 * <h4>Getting the value for a single key</h4>
	 * <pre>
	 *    data("myKey")
	 * </pre>
	 * Retrieves whatever data has been attached to this element (using the key "myKey") before.
	 *
	 *
	 * <h4>Removing the value for a single key</h4>
	 * <pre>
	 *    data("myKey", null)
	 * </pre>
	 * Removes whatever data has been attached to this element (using the key "myKey") before.
	 *
	 *
	 * <h4>Removing all custom data for all keys</h4>
	 * <pre>
	 *    data(null)
	 * </pre>
	 *
	 *
	 * <h4>Getting all custom data values as a plain object</h4>
	 * <pre>
	 *    data()
	 * </pre>
	 * Returns all data, as a map-like object, property names are keys, property values are values.
	 *
	 *
	 * <h4>Setting multiple key/value pairs in a single call</h4>
	 * <pre>
	 *    data({"myKey1": myData, "myKey2": null})
	 * </pre>
	 * Attaches <code>myData</code> (using the key "myKey1" and removes any data that had been
	 * attached for key "myKey2".
	 *
     *
	 * @param {string|Object<string,any>|null} [vKeyOrData]
	 *     Single key to set or remove, or an object with key/value pairs or <code>null</code> to remove
	 *     all custom data
	 * @param {string|any} [vValue]
	 *     Value to set or <code>null</code> to remove the corresponding custom data
	 * @returns {Object<string,any>|any|null}
	 *     A map with all custom data, a custom data value for a single specified key or <code>null</code>
	 *     when no custom data exists for such a key or this element when custom data was to be removed.
	 * @throws {TypeError}
	 *     When the type of the given parameters doesn't match any of the documented usages
	 * 
	 */
	data(..._args) : any;

    /**
     * Add a listener for the given function.
     * 
     * @param name The function to listen to
     * @param listener The callback to call
     */
    addListener(name:'onPreRender'|'onPostRender',listener:(ref?:any)=>any);

    /**
     * Removes a previously added listener for the given function.
     * 
     * @param name 
     * @param listener 
     * @returns 
     */
    removeListener(name:'onPreRender'|'onPostRender',listener:(ref?:any)=>any);



    /**
     * Dispatch a DOM synthetic event on the root node of this object.
     * See https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events
     * 
     * @param eventname The event to send , e.g. 'myevent' 
     * @param detail An arbotrary payload. If not supplied, {sender:this.coelement} will be used.
     * 
     * @returns The custom event. 
     */
     dispatchEvent(eventname:string,detail?:{[key:string]:any},options?:EventInit) : Event;
    

    /**
     * Gets or sets parameters for children by their iteration and tag name.
     * 
     * @param iteration 
     * @param tagname 
     * @param parameters If specified, sets the parameters, else returns them
     */
    childParams(iteration:number,tagname:string,parameters?:any) : any;

    /**
     * Matches all source nodes in this impl.
     * 
     * @param matcher 
     */
    matchSnode(matcher:(snode:Node)=>boolean) : boolean
}



/**
 * A convenience method for fetching an attribute from a node. if not found the default value in `defval` is returned.
 * 
 * @param node 
 * @param attr 
 * @param defvalue 
 */
export function getAttr<T extends (number|string|boolean)=string>(cvt:Converter<This>,node:Node,attr:string,defvalue?:T,currtn?:TargetNode) : T {
    let elem:Element = (node as any as Element);
    let value=elem.getAttribute(attr);
    if (!value)
        return defvalue;

    if (cvt)
        value=cvt.expandString(value,currtn);

    // convert
    if (typeof defvalue=='string')
        return (value as any);
    if (typeof defvalue=='number')
        return Number.parseFloat(value) as any;
    if (typeof defvalue=='boolean')
        return (value.trim().toLowerCase()=='true') as any;

    return value as any;
}


/**
 * Reads an attribute and returns an object encoded as a string with keys and value encoded as ' delimited strings.
 * 
 * E.g:
 * ```html
 *     <ws-asset-thumbnail asset-id="{'type':'image','file':'code.PNG'}"><ws-asset-thumbnail>
 * ```
 * will return {type:"image",file:"code.PNG"}
 * 
 * @param cvt 
 * @param node 
 * @param attr 
 * @param defvalue 
 * @returns 
 */
export function getObjectAttr<T extends {[key:string]:any}>(cvt:Converter<This>,node:Node,attr:string ,defvalue?:T) : T {
    let str=getAttr(cvt,node,attr);
    if (!str || str.trim().length==0)
        return defvalue;
    let obj=JSON.parse(str.replace(/'/g,'"'));
    return obj;
}

/**
 * A utility fnction that can be use dto fetch both the Converter and the TargetNode of a CoElement into local constants.
 * 
 * Usage:
 * ```typescript
 * const {cvt,tn} = ctn(this);
 * ```
 * @param component 
 * @returns 
 */
export function ctn<T extends This>(component:CoElement) : {cvt:Converter<T>,tn:TargetNode} {
    return {cvt:(component.getCvt() as Converter<T>),tn:component.getTN()}
}


export function isTargetNode(pot:any) : pot is TargetNode {
    return pot && typeof pot == 'object' && 'sourceChildNodes' in pot;
}
